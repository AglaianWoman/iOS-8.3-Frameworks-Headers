//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <CloudKitDaemon/CKDDatabaseOperation.h>

@class CKDRecordCache, NSArray, NSDictionary, NSMapTable, NSMutableDictionary, NSObject<OS_dispatch_group>, NSSet;

@interface CKDFetchRecordsOperation : CKDDatabaseOperation
{
    BOOL _useCachedEtags;
    BOOL _forcePCSDecrypt;
    BOOL _shouldFetchAssetContent;
    NSArray *_fullRecordsToFetch;
    CDUnknownBlockType _recordFetchProgressBlock;
    CDUnknownBlockType _recordFetchCompletionBlock;
    NSArray *_recordIDsToFetch;
    NSMutableDictionary *_cachedRecords;
    NSSet *_desiredKeySet;
    NSDictionary *_recordIDsToVersionETags;
    NSDictionary *_desiredPackageFileIndices;
    NSObject<OS_dispatch_group> *_fetchRecordsGroup;
    NSMutableDictionary *_errorsByRecordID;
    NSMapTable *_downloadTasksByRecordID;
    NSDictionary *_signaturesOfAssetsByRecordIDAndKey;
    NSSet *_assetFieldNamesToPublishURLs;
    unsigned int _requestedTTL;
    unsigned int _URLOptions;
    CKDRecordCache *_cache;
    NSDictionary *_webSharingIdentityDataByRecordID;
}

@property(retain, nonatomic) NSDictionary *signaturesOfAssetsByRecordIDAndKey; // @synthesize signaturesOfAssetsByRecordIDAndKey=_signaturesOfAssetsByRecordIDAndKey;
@property(retain, nonatomic) NSMapTable *downloadTasksByRecordID; // @synthesize downloadTasksByRecordID=_downloadTasksByRecordID;
@property(retain, nonatomic) NSMutableDictionary *errorsByRecordID; // @synthesize errorsByRecordID=_errorsByRecordID;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *fetchRecordsGroup; // @synthesize fetchRecordsGroup=_fetchRecordsGroup;
@property(retain, nonatomic) NSMutableDictionary *cachedRecords; // @synthesize cachedRecords=_cachedRecords;
- (void)_didDownloadAssetsWithError:(id)arg1;
- (void)_finishAllDownloadTasksWithError:(id)arg1;
- (BOOL)_prepareAsset:(id)arg1 record:(id)arg2 recordKey:(id)arg3 signature:(id)arg4;
- (void)_decryptPropertiesOnRecord:(id)arg1;
- (void)_continueHandleFetchedRecord:(id)arg1;
- (void)setError:(id)arg1 forRecordID:(id)arg2;
@property(nonatomic) BOOL forcePCSDecrypt; // @synthesize forcePCSDecrypt=_forcePCSDecrypt;
@property(retain, nonatomic) NSDictionary *webSharingIdentityDataByRecordID; // @synthesize webSharingIdentityDataByRecordID=_webSharingIdentityDataByRecordID;
- (void)_addDownloadTaskForRecord:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
@property(copy, nonatomic) CDUnknownBlockType recordFetchCompletionBlock; // @synthesize recordFetchCompletionBlock=_recordFetchCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType recordFetchProgressBlock; // @synthesize recordFetchProgressBlock=_recordFetchProgressBlock;
- (id)errorForRecordID:(id)arg1;
@property(retain, nonatomic) NSArray *fullRecordsToFetch; // @synthesize fullRecordsToFetch=_fullRecordsToFetch;
- (void)_handleRecordFetch:(id)arg1 recordID:(id)arg2 etagMatched:(BOOL)arg3 responseCode:(id)arg4;
@property(nonatomic) BOOL useCachedEtags; // @synthesize useCachedEtags=_useCachedEtags;
- (void)_downloadAssets;
@property(retain, nonatomic) NSDictionary *desiredPackageFileIndices; // @synthesize desiredPackageFileIndices=_desiredPackageFileIndices;
@property(retain, nonatomic) NSSet *assetFieldNamesToPublishURLs; // @synthesize assetFieldNamesToPublishURLs=_assetFieldNamesToPublishURLs;
@property(retain, nonatomic) NSDictionary *recordIDsToVersionETags; // @synthesize recordIDsToVersionETags=_recordIDsToVersionETags;
@property(nonatomic) unsigned int URLOptions; // @synthesize URLOptions=_URLOptions;
@property(nonatomic) unsigned int requestedTTL; // @synthesize requestedTTL=_requestedTTL;
- (void)_fetchRecords;
@property(retain, nonatomic) NSSet *desiredKeySet; // @synthesize desiredKeySet=_desiredKeySet;
@property(nonatomic) BOOL shouldFetchAssetContent; // @synthesize shouldFetchAssetContent=_shouldFetchAssetContent;
@property(retain, nonatomic) NSArray *recordIDsToFetch; // @synthesize recordIDsToFetch=_recordIDsToFetch;
- (BOOL)makeStateTransition;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (id)nameForState:(unsigned int)arg1;
- (id)initWithOperationInfo:(id)arg1 clientContext:(id)arg2;
- (void)finishWithError:(id)arg1;
@property(retain, nonatomic) CKDRecordCache *cache; // @synthesize cache=_cache;
- (void).cxx_destruct;
- (void)main;

@end

