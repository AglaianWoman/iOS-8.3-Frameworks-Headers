//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class LTEAudioDevice, NSDictionary, NSMutableArray, NSNumber, NSObject<OS_dispatch_queue>, NSString;

@interface LTEAudioManager : NSObject
{
    int audioRefCount;
    int connectionRefCount;
    int hardwareSampleRate;
    struct AudioStreamBasicDescription vpioFormat;
    BOOL usingFloat;
    BOOL enableSpeakerPhone;
    BOOL isUsingSuppression;
    BOOL isTetheredDisplayMode;
    BOOL shouldSetupAudioSession;
    int clientPID;
    struct _opaque_pthread_mutex_t audioLock;
    NSObject<OS_dispatch_queue> *cmSessionQueue;
    NSObject<OS_dispatch_queue> *inputDeviceQueue;
    struct tagHANDLE *hAUIO;
    LTEAudioDevice *targetInputDevice;
    struct opaqueCMSession *cmSession;
    int cmSessionRefCount;
    float fLastStartAudioSessionCall;
    NSDictionary *requestedSessionParams;
    NSNumber *currentClientPriority;
    NSString *currentAudioCategory;
    NSString *currentAudioMode;
    int deviceClass;
    unsigned long preferredHardwareSampleRate;
    unsigned long currentVPOperatingMode;
    BOOL currentAudioRecordingMode;
    int currentSampleRate;
    int currentMinSamplesPerFrame;
    BOOL currentReceiverStatus;
    struct AudioEventQueue_t *eventQ;
    NSMutableArray *spkrConfList;
    NSMutableArray *micConfList;
    BOOL isGKVoiceChat;
    BOOL _microphoneMuted;
}

+ (id)defaultLTEAudioManager;
@property BOOL shouldSetupAudioSession;
- (void)stopAudioIOWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startAudioIOWithFarEndVersionInfo:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 internalFormat:(struct AudioStreamBasicDescription)arg3 allowAudioRecording:(BOOL)arg4 remoteCodecType:(unsigned long)arg5 remoteCodecSampleRate:(double)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)tearDownAudioIO:(BOOL)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)AUIOSetup:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 allowAudioRecording:(BOOL)arg3 ignoreRefCount:(BOOL)arg4 remoteCodecType:(unsigned long)arg5 remoteCodecSampleRate:(double)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (unsigned long)blockSizeForSampleRate:(double)arg1;
@property(retain) LTEAudioDevice *targetInputDevice; // @synthesize targetInputDevice;
@property(nonatomic) int clientPID; // @synthesize clientPID;
- (void)setBlockSizeDispatch:(BOOL)arg1;
- (void)handleAudioInterruption:(struct opaqueCMSession *)arg1 interruptionInfo:(struct __CFDictionary *)arg2 cmd:(unsigned int)arg3;
- (struct opaqueCMSession *)cmSessionRef;
- (BOOL)forceBufferFrames:(int *)arg1;
- (BOOL)forceSampleRate:(double *)arg1;
- (void)setBlockSize:(BOOL)arg1;
- (void)setSampleRate;
- (void)setupVPBlockFormat;
- (void)invalidateCurrentAudioParams;
- (unsigned long)setupAudioSession;
- (void)resetAudioSessionProperties;
- (void)setAudioSessionProperties;
- (BOOL)projectionModeEnabledState;
- (void)setupAudioNotifications;
- (void)setAudioSessionParameters:(id)arg1;
- (void)audioSessionClientDied:(int)arg1;
- (void)tearDownAudioSession:(unsigned long)arg1 forceTearDown:(BOOL)arg2;
- (void)AUIOTeardown:(BOOL)arg1;
- (void)stopAudioSession:(unsigned long)arg1;
- (unsigned long)startAudioSessionWithCompletionHandler:(CDUnknownBlockType)arg1 dispatchQueue:(id)arg2;
- (void)processEventQueue;
- (void)cleanupAUIOSetupWithResult:(long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)setCurrentInputDevice:(id)arg1;
- (id)currentInputDevice;
- (void)removeConference:(id)arg1;
- (void)addConference:(id)arg1;
- (void)onPlaySound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(float)arg5;
- (void)onCaptureSound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned long)arg9;
@property(readonly, nonatomic) BOOL usingFloat; // @synthesize usingFloat;
@property(nonatomic) BOOL isUsingSuppression; // @synthesize isUsingSuppression;
- (void)enableMetering:(BOOL)arg1 isInputMeter:(BOOL)arg2;
- (void)getVpioFormat:(struct AudioStreamBasicDescription *)arg1;
- (void)setSamplesPerFrame:(int)arg1;
@property(nonatomic) BOOL isGKVoiceChat; // @synthesize isGKVoiceChat;
@property(getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone;
@property(nonatomic, getter=isMicrophoneMuted) BOOL microphoneMuted; // @synthesize microphoneMuted=_microphoneMuted;
- (id)init;
- (unsigned long)preferredHardwareSampleRate;

@end

