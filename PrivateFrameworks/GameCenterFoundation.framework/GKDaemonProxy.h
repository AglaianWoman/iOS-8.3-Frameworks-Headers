//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "GKClientProtocol.h"
#import "NSXPCConnectionDelegate.h"

@class GKThreadsafeDictionary, NSDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_semaphore>, NSString, NSXPCConnection;

@interface GKDaemonProxy : NSObject <NSXPCConnectionDelegate, GKClientProtocol>
{
    int _hostPID;
    NSXPCConnection *_connection;
    NSObject<OS_dispatch_semaphore> *_serviceSemaphore;
    NSDictionary *_serviceLookup;
    NSDictionary *_interfaceLookup;
    NSObject<OS_dispatch_queue> *_invocationQueue;
    NSObject<OS_dispatch_semaphore> *_concurrentRequestSemaphore;
    GKThreadsafeDictionary *_pendingRequests;
    id <GKDaemonProxyDataUpdateDelegate> _dataUpdateDelegate;
    id <GKDaemonProxyNetworkActivityIndicatorDelegate> _networkActivityIndicatorDelegate;
}

+ (id)utilityServicePrivateProxy;
+ (id)utilityServiceProxy;
+ (id)accountServicePrivateProxy;
+ (id)gameStatServicePrivateProxy;
+ (id)linkedAccountsServicePrivateProxy;
+ (id)analyticsServicePrivateProxy;
+ (id)linkedAccountsServiceProxy;
+ (id)bulletinServicePrivateProxy;
+ (id)bulletinServiceProxy;
+ (id)multiplayerServicePrivateProxy;
+ (id)challengeServicePrivateProxy;
+ (id)challengeServiceProxy;
+ (id)gameServiceProxy;
+ (id)daemonProxy;
+ (id)turnBasedServicePrivateProxy;
+ (id)turnBasedServiceProxy;
+ (id)profileServiceProxy;
+ (id)analyticsServiceProxy;
+ (id)accountServiceProxy;
+ (id)multiplayerServiceProxy;
+ (id)friendServicePrivateProxy;
+ (id)friendServiceProxy;
+ (id)profileServicePrivateProxy;
+ (id)gameStatServiceProxy;
+ (id)gameServicePrivateProxy;
- (id)accountName;
@property(nonatomic) id <GKDaemonProxyDataUpdateDelegate> dataUpdateDelegate; // @synthesize dataUpdateDelegate=_dataUpdateDelegate;
@property(nonatomic) id <GKDaemonProxyNetworkActivityIndicatorDelegate> networkActivityIndicatorDelegate; // @synthesize networkActivityIndicatorDelegate=_networkActivityIndicatorDelegate;
- (id)authenticatedPlayerInfo;
- (BOOL)hasAuthenticatedAccount;
- (void)getAccountURLsWithHandler:(CDUnknownBlockType)arg1;
- (id)authenticatedPlayerID;
- (oneway void)setLogBits:(int)arg1;
- (oneway void)achievementSelected:(id)arg1;
- (oneway void)scoreSelected:(id)arg1;
- (oneway void)respondedToNearbyInvite:(id)arg1;
- (oneway void)setLocalPlayer:(id)arg1 authenticated:(BOOL)arg2 reply:(CDUnknownBlockType)arg3;
- (oneway void)setCurrentGame:(id)arg1 serverEnvironment:(int)arg2 reply:(CDUnknownBlockType)arg3;
- (oneway void)setPreferencesValues:(id)arg1;
- (void)_replyToDuplicatesForRequest:(id)arg1 withInvocation:(id)arg2 queue:(id)arg3;
- (id)replyQueueForRequestSelector:(SEL)arg1;
- (void)buildServiceLookupIfNeccessary;
- (id)methodSignatureForProtocol:(id)arg1 selector:(SEL)arg2;
- (oneway void)setBadgeCount:(unsigned int)arg1 forType:(unsigned int)arg2;
- (oneway void)challengeCompleted:(id)arg1;
- (oneway void)challengeReceived:(id)arg1;
- (void)dispatchCompletedChallenge:(id)arg1;
- (oneway void)completedChallengeSelected:(id)arg1;
- (oneway void)receivedChallengeSelected:(id)arg1;
- (oneway void)resetNetworkActivity;
- (oneway void)endNetworkActivity;
- (oneway void)beginNetworkActivity;
- (oneway void)getAccountNameWithHandler:(CDUnknownBlockType)arg1;
- (oneway void)getAuthenticatedPlayerIDWithHandler:(CDUnknownBlockType)arg1;
- (void)buildInterfaceLookup;
- (void)resetServiceLookup;
- (void)addService:(id)arg1 forProtocol:(id)arg2 toLookup:(id)arg3;
- (void)buildServiceLookup;
- (void)_resetServiceLookup;
- (void)addInterface:(id)arg1 toLookup:(id)arg2;
- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2;
- (void)setHostPID:(int)arg1;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(BOOL)arg3;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)init;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

